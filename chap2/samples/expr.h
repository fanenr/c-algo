#ifndef EXPR_H
#define EXPR_H

#include "../slist.h"

enum EXPR_NODE_TYPE
{
    EXPR_NODE_PLUS = '+',  /* operator: + */
    EXPR_NODE_MINUS = '-', /* operator: - */
    EXPR_NODE_STAR = '*',  /* operator: * */
    EXPR_NODE_SLASH = '/', /* operator: / */

    EXPR_NODE_INT = -3,    /* operand: integer */
    EXPR_NODE_FLOAT = -2,  /* operand: floating */
    EXPR_NODE_NONE = -1,   /* invalid node */
};

struct expr_node
{
    enum EXPR_NODE_TYPE type;
    union {
        long integer;
        double floating;
    } data;
};

/*
 * converts an infix expression to a postfix expression.
 * read no more than `len` chars from `src` and try to convert it.
 * return NULL on failure and slist on success.
 * NOTE: use expr_free instead of slist_free to free the returend slist.
 */
extern slist expr_in2post(const char *src, size_t len);

/*
 * free `list`.
 * ensure all nodes of `list` contain a pointer of expr_node and which also must
 * be allocated by malloc.
 */
extern void expr_free(slist *list);

/*
 * evaluate a postfix expression.
 * read data from `list` (which should be generated by expr_in2post) and put the
 * result of expression into `result`.
 * if the expression evaluates successfully, the `.type` and `.data` of `result`
 * will be set, otherwise, the `.type` will be set to EXPR_NODE_NONE.
 */
extern void expr_evaluate(const slist *restrict list,
                          struct expr_node *restrict result);

#endif
